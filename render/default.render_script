local world_width=720
local world_height=960
local aspect=world_width/world_height
local render_helper=require ("render.render_helper")


function init(self)
    self.tile_pred = render.predicate({"tile"})
    self.gui_pred = render.predicate({"gui"})
    self.text_pred = render.predicate({"text"})
    self.particle_pred = render.predicate({"particle"})

    self.clear_color = vmath.vector4(0, 0, 0, 0)
    self.clear_color.x = sys.get_config("render.clear_color_red", 0)
    self.clear_color.y = sys.get_config("render.clear_color_green", 0)
    self.clear_color.z = sys.get_config("render.clear_color_blue", 0)
    self.clear_color.w = sys.get_config("render.clear_color_alpha", 0)
    self.view = vmath.matrix4()
    self.player_position_x=0
    
end

function update(self)

    render.set_depth_mask(true)
    render.clear({[render.BUFFER_COLOR_BIT] = self.clear_color, [render.BUFFER_DEPTH_BIT] = 1, [render.BUFFER_STENCIL_BIT] = 0})
	
	local window_width=render.get_window_width()
	local window_height=render.get_window_height()
	
	local new_world_width=world_height*window_width/window_height
	local delta_width=0
	if(new_world_width>world_width)then
		delta_width=(window_width-window_height*aspect)
		new_world_width=world_width	
	end
	
	
	
    render.set_viewport(delta_width/2, 0, window_width-delta_width, render.get_window_height())
    render.set_view(self.view)

    render.set_depth_mask(false)
    render.disable_state(render.STATE_DEPTH_TEST)
    render.disable_state(render.STATE_STENCIL_TEST)
    render.enable_state(render.STATE_BLEND)
    render.set_blend_func(render.BLEND_SRC_ALPHA, render.BLEND_ONE_MINUS_SRC_ALPHA)
    render.disable_state(render.STATE_CULL_FACE)
	local camera_x=0
	if(delta_width ~= 0)then
		render.set_projection(vmath.matrix4_orthographic(0, new_world_width, 0, world_height, -1, 1))	
	else
		-- 112 is player size in pixels
		-- player x position 0 and 720-112
		local player_percent_move=(self.player_position_x-56)/(world_width-112)
		--print(self.player_position_x)
		camera_x=(world_width-new_world_width)*player_percent_move
    	render.set_projection(vmath.matrix4_orthographic(camera_x, new_world_width+camera_x, 0, world_height, -1, 1))	   	
	end
	
	
    render.draw(self.tile_pred)
    render.draw(self.particle_pred)
    render.draw_debug3d()

    render.set_view(vmath.matrix4())
    if(delta_width ~= 0)then
    	render.set_projection(vmath.matrix4_orthographic(delta_width/2,render.get_window_width()-delta_width/2, 0, render.get_window_height(), -1, 1))
    else
    	render.set_projection(vmath.matrix4_orthographic(0, render.get_window_width(), 0, render.get_window_height(), -1, 1))
	end

    render.enable_state(render.STATE_STENCIL_TEST)
    render.draw(self.gui_pred)
    render.draw(self.text_pred)
    render.disable_state(render.STATE_STENCIL_TEST)

    render.set_depth_mask(false)
    render.draw_debug2d()
    
    render_helper.updateWorld(new_world_width,world_height,delta_width/2,0,window_width-delta_width,window_height,camera_x)
end

function on_message(self, message_id, message)
    if message_id == hash("clear_color") then
        self.clear_color = message.color
    elseif message_id == hash("set_view_projection") then
        self.view = message.view
    elseif message_id == hash("player_position") then
    	 self.player_position_x = (message.position.x)
    	 
    end
end
