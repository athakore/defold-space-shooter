go.property("speed", 300)
go.property("bullet_speed",0.4)
local render_helper=require ("render.render_helper")

local function init_vars(self)
	msg.post(".","acquire_input_focus")
	self.position=go.get_position()
    self.max_move=vmath.vector3(0,0,0)
    self.half=vmath.vector3(56,44,0)
    self.last_shot=0 
end

function init(self)
	init_vars(self) 
end

local function reset(self)
	msg.post(".","enable")
	go.set_position(vmath.vector3(360,40,1))
    init_vars(self)	
end

function update(self, dt)
	self.last_shot=self.last_shot+dt
    if(vmath.length(self.max_move) ~=0)then
    	local velocity=vmath.normalize(self.max_move)
    	velocity=velocity*self.speed*dt
    	if(vmath.length(velocity)>vmath.length(self.max_move))then
    		velocity=self.max_move
    	end
    	self.position=self.position+velocity
    	go.set_position(self.position)
    	msg.post("@render:","player_position",{position = vmath.vector3(self.position)})
    	--print(go.get_position())
    end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("contact_point_response") then
    	if (message.group==hash("asteroid")) then
    		msg.post("controller","player_die")
    		msg.post(".","disable")
    		msg.post(".","release_input_focus")
    	end
    elseif(message_id == hash("reset")) then
    	reset(self)
  	end
end

function on_input(self, action_id, action)
    local touched = (action_id == hash("click") or action_id == hash("touch"))
	if(touched and not action.released) then
		--MOVEMENT
		self.touch_position=render_helper.action_to_camera_position(action)
		self.touch_position.x=render_helper.clamp(self.touch_position.x,self.half.x,720-self.half.x)
		self.touch_position.y=render_helper.clamp(self.touch_position.y,self.half.y,960-self.half.y)
		self.max_move=self.touch_position - self.position
		self.max_move.z=0
		
		--FIRE
		
		if(self.last_shot>self.bullet_speed)then
    		self.last_shot=0
    		local bullet_position=vmath.vector3(self.position);
    		bullet_position.y=bullet_position.y+self.half.y
    		local bullet = factory.create("#bullet_factory", bullet_position, nil, {}, 1)
    	end
	else 
		self.max_move=vmath.vector3(0,0,0)
	end	
end



function final(self)
    msg.post(".","release_input_focus")
end

